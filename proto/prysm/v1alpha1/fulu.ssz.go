// Code generated by fastssz. DO NOT EDIT.
package eth

import (
	ssz "github.com/prysmaticlabs/fastssz"
	github_com_prysmaticlabs_prysm_v5_consensus_types_primitives "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives"
)

// MarshalSSZ ssz marshals the SignedBeaconBlockContentsFulu object
func (s *SignedBeaconBlockContentsFulu) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedBeaconBlockContentsFulu object to a target array
func (s *SignedBeaconBlockContentsFulu) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Block'
	dst = ssz.WriteOffset(dst, offset)
	if s.Block == nil {
		s.Block = new(SignedBeaconBlockFulu)
	}
	offset += s.Block.SizeSSZ()

	// Offset (1) 'KzgProofs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.KzgProofs) * 48

	// Offset (2) 'Blobs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Blobs) * 131072

	// Field (0) 'Block'
	if dst, err = s.Block.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'KzgProofs'
	if size := len(s.KzgProofs); size > 4096 {
		err = ssz.ErrListTooBigFn("--.KzgProofs", size, 4096)
		return
	}
	for ii := 0; ii < len(s.KzgProofs); ii++ {
		if size := len(s.KzgProofs[ii]); size != 48 {
			err = ssz.ErrBytesLengthFn("--.KzgProofs[ii]", size, 48)
			return
		}
		dst = append(dst, s.KzgProofs[ii]...)
	}

	// Field (2) 'Blobs'
	if size := len(s.Blobs); size > 4096 {
		err = ssz.ErrListTooBigFn("--.Blobs", size, 4096)
		return
	}
	for ii := 0; ii < len(s.Blobs); ii++ {
		if size := len(s.Blobs[ii]); size != 131072 {
			err = ssz.ErrBytesLengthFn("--.Blobs[ii]", size, 131072)
			return
		}
		dst = append(dst, s.Blobs[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedBeaconBlockContentsFulu object
func (s *SignedBeaconBlockContentsFulu) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'Block'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'KzgProofs'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'Blobs'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Block'
	{
		buf = tail[o0:o1]
		if s.Block == nil {
			s.Block = new(SignedBeaconBlockFulu)
		}
		if err = s.Block.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'KzgProofs'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 48, 4096)
		if err != nil {
			return err
		}
		s.KzgProofs = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(s.KzgProofs[ii]) == 0 {
				s.KzgProofs[ii] = make([]byte, 0, len(buf[ii*48:(ii+1)*48]))
			}
			s.KzgProofs[ii] = append(s.KzgProofs[ii], buf[ii*48:(ii+1)*48]...)
		}
	}

	// Field (2) 'Blobs'
	{
		buf = tail[o2:]
		num, err := ssz.DivideInt2(len(buf), 131072, 4096)
		if err != nil {
			return err
		}
		s.Blobs = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(s.Blobs[ii]) == 0 {
				s.Blobs[ii] = make([]byte, 0, len(buf[ii*131072:(ii+1)*131072]))
			}
			s.Blobs[ii] = append(s.Blobs[ii], buf[ii*131072:(ii+1)*131072]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedBeaconBlockContentsFulu object
func (s *SignedBeaconBlockContentsFulu) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Block'
	if s.Block == nil {
		s.Block = new(SignedBeaconBlockFulu)
	}
	size += s.Block.SizeSSZ()

	// Field (1) 'KzgProofs'
	size += len(s.KzgProofs) * 48

	// Field (2) 'Blobs'
	size += len(s.Blobs) * 131072

	return
}

// HashTreeRoot ssz hashes the SignedBeaconBlockContentsFulu object
func (s *SignedBeaconBlockContentsFulu) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedBeaconBlockContentsFulu object with a hasher
func (s *SignedBeaconBlockContentsFulu) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Block'
	if err = s.Block.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'KzgProofs'
	{
		if size := len(s.KzgProofs); size > 4096 {
			err = ssz.ErrListTooBigFn("--.KzgProofs", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range s.KzgProofs {
			if len(i) != 48 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(s.KzgProofs))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	// Field (2) 'Blobs'
	{
		if size := len(s.Blobs); size > 4096 {
			err = ssz.ErrListTooBigFn("--.Blobs", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Blobs {
			if len(i) != 131072 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(s.Blobs))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SignedBeaconBlockFulu object
func (s *SignedBeaconBlockFulu) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedBeaconBlockFulu object to a target array
func (s *SignedBeaconBlockFulu) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(100)

	// Offset (0) 'Block'
	dst = ssz.WriteOffset(dst, offset)
	if s.Block == nil {
		s.Block = new(BeaconBlockElectra)
	}
	offset += s.Block.SizeSSZ()

	// Field (1) 'Signature'
	if size := len(s.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("--.Signature", size, 96)
		return
	}
	dst = append(dst, s.Signature...)

	// Field (0) 'Block'
	if dst, err = s.Block.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedBeaconBlockFulu object
func (s *SignedBeaconBlockFulu) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 100 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Block'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 100 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[4:100]))
	}
	s.Signature = append(s.Signature, buf[4:100]...)

	// Field (0) 'Block'
	{
		buf = tail[o0:]
		if s.Block == nil {
			s.Block = new(BeaconBlockElectra)
		}
		if err = s.Block.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedBeaconBlockFulu object
func (s *SignedBeaconBlockFulu) SizeSSZ() (size int) {
	size = 100

	// Field (0) 'Block'
	if s.Block == nil {
		s.Block = new(BeaconBlockElectra)
	}
	size += s.Block.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedBeaconBlockFulu object
func (s *SignedBeaconBlockFulu) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedBeaconBlockFulu object with a hasher
func (s *SignedBeaconBlockFulu) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Block'
	if err = s.Block.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signature'
	if size := len(s.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("--.Signature", size, 96)
		return
	}
	hh.PutBytes(s.Signature)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the BeaconBlockContentsFulu object
func (b *BeaconBlockContentsFulu) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockContentsFulu object to a target array
func (b *BeaconBlockContentsFulu) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Block'
	dst = ssz.WriteOffset(dst, offset)
	if b.Block == nil {
		b.Block = new(BeaconBlockElectra)
	}
	offset += b.Block.SizeSSZ()

	// Offset (1) 'KzgProofs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.KzgProofs) * 48

	// Offset (2) 'Blobs'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Blobs) * 131072

	// Field (0) 'Block'
	if dst, err = b.Block.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'KzgProofs'
	if size := len(b.KzgProofs); size > 4096 {
		err = ssz.ErrListTooBigFn("--.KzgProofs", size, 4096)
		return
	}
	for ii := 0; ii < len(b.KzgProofs); ii++ {
		if size := len(b.KzgProofs[ii]); size != 48 {
			err = ssz.ErrBytesLengthFn("--.KzgProofs[ii]", size, 48)
			return
		}
		dst = append(dst, b.KzgProofs[ii]...)
	}

	// Field (2) 'Blobs'
	if size := len(b.Blobs); size > 4096 {
		err = ssz.ErrListTooBigFn("--.Blobs", size, 4096)
		return
	}
	for ii := 0; ii < len(b.Blobs); ii++ {
		if size := len(b.Blobs[ii]); size != 131072 {
			err = ssz.ErrBytesLengthFn("--.Blobs[ii]", size, 131072)
			return
		}
		dst = append(dst, b.Blobs[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockContentsFulu object
func (b *BeaconBlockContentsFulu) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'Block'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'KzgProofs'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'Blobs'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Block'
	{
		buf = tail[o0:o1]
		if b.Block == nil {
			b.Block = new(BeaconBlockElectra)
		}
		if err = b.Block.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'KzgProofs'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 48, 4096)
		if err != nil {
			return err
		}
		b.KzgProofs = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(b.KzgProofs[ii]) == 0 {
				b.KzgProofs[ii] = make([]byte, 0, len(buf[ii*48:(ii+1)*48]))
			}
			b.KzgProofs[ii] = append(b.KzgProofs[ii], buf[ii*48:(ii+1)*48]...)
		}
	}

	// Field (2) 'Blobs'
	{
		buf = tail[o2:]
		num, err := ssz.DivideInt2(len(buf), 131072, 4096)
		if err != nil {
			return err
		}
		b.Blobs = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(b.Blobs[ii]) == 0 {
				b.Blobs[ii] = make([]byte, 0, len(buf[ii*131072:(ii+1)*131072]))
			}
			b.Blobs[ii] = append(b.Blobs[ii], buf[ii*131072:(ii+1)*131072]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockContentsFulu object
func (b *BeaconBlockContentsFulu) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Block'
	if b.Block == nil {
		b.Block = new(BeaconBlockElectra)
	}
	size += b.Block.SizeSSZ()

	// Field (1) 'KzgProofs'
	size += len(b.KzgProofs) * 48

	// Field (2) 'Blobs'
	size += len(b.Blobs) * 131072

	return
}

// HashTreeRoot ssz hashes the BeaconBlockContentsFulu object
func (b *BeaconBlockContentsFulu) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockContentsFulu object with a hasher
func (b *BeaconBlockContentsFulu) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Block'
	if err = b.Block.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'KzgProofs'
	{
		if size := len(b.KzgProofs); size > 4096 {
			err = ssz.ErrListTooBigFn("--.KzgProofs", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.KzgProofs {
			if len(i) != 48 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(b.KzgProofs))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	// Field (2) 'Blobs'
	{
		if size := len(b.Blobs); size > 4096 {
			err = ssz.ErrListTooBigFn("--.Blobs", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.Blobs {
			if len(i) != 131072 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(b.Blobs))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SignedBlindedBeaconBlockFulu object
func (s *SignedBlindedBeaconBlockFulu) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedBlindedBeaconBlockFulu object to a target array
func (s *SignedBlindedBeaconBlockFulu) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(100)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	if s.Message == nil {
		s.Message = new(BlindedBeaconBlockFulu)
	}
	offset += s.Message.SizeSSZ()

	// Field (1) 'Signature'
	if size := len(s.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("--.Signature", size, 96)
		return
	}
	dst = append(dst, s.Signature...)

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedBlindedBeaconBlockFulu object
func (s *SignedBlindedBeaconBlockFulu) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 100 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 100 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[4:100]))
	}
	s.Signature = append(s.Signature, buf[4:100]...)

	// Field (0) 'Message'
	{
		buf = tail[o0:]
		if s.Message == nil {
			s.Message = new(BlindedBeaconBlockFulu)
		}
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedBlindedBeaconBlockFulu object
func (s *SignedBlindedBeaconBlockFulu) SizeSSZ() (size int) {
	size = 100

	// Field (0) 'Message'
	if s.Message == nil {
		s.Message = new(BlindedBeaconBlockFulu)
	}
	size += s.Message.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedBlindedBeaconBlockFulu object
func (s *SignedBlindedBeaconBlockFulu) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedBlindedBeaconBlockFulu object with a hasher
func (s *SignedBlindedBeaconBlockFulu) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signature'
	if size := len(s.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("--.Signature", size, 96)
		return
	}
	hh.PutBytes(s.Signature)

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the BlindedBeaconBlockFulu object
func (b *BlindedBeaconBlockFulu) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BlindedBeaconBlockFulu object to a target array
func (b *BlindedBeaconBlockFulu) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(84)

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.ProposerIndex))

	// Field (2) 'ParentRoot'
	if size := len(b.ParentRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.ParentRoot", size, 32)
		return
	}
	dst = append(dst, b.ParentRoot...)

	// Field (3) 'StateRoot'
	if size := len(b.StateRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.StateRoot", size, 32)
		return
	}
	dst = append(dst, b.StateRoot...)

	// Offset (4) 'Body'
	dst = ssz.WriteOffset(dst, offset)
	if b.Body == nil {
		b.Body = new(BlindedBeaconBlockBodyElectra)
	}
	offset += b.Body.SizeSSZ()

	// Field (4) 'Body'
	if dst, err = b.Body.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BlindedBeaconBlockFulu object
func (b *BlindedBeaconBlockFulu) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 84 {
		return ssz.ErrSize
	}

	tail := buf
	var o4 uint64

	// Field (0) 'Slot'
	b.Slot = github_com_prysmaticlabs_prysm_v5_consensus_types_primitives.Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'ProposerIndex'
	b.ProposerIndex = github_com_prysmaticlabs_prysm_v5_consensus_types_primitives.ValidatorIndex(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'ParentRoot'
	if cap(b.ParentRoot) == 0 {
		b.ParentRoot = make([]byte, 0, len(buf[16:48]))
	}
	b.ParentRoot = append(b.ParentRoot, buf[16:48]...)

	// Field (3) 'StateRoot'
	if cap(b.StateRoot) == 0 {
		b.StateRoot = make([]byte, 0, len(buf[48:80]))
	}
	b.StateRoot = append(b.StateRoot, buf[48:80]...)

	// Offset (4) 'Body'
	if o4 = ssz.ReadOffset(buf[80:84]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 != 84 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (4) 'Body'
	{
		buf = tail[o4:]
		if b.Body == nil {
			b.Body = new(BlindedBeaconBlockBodyElectra)
		}
		if err = b.Body.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlindedBeaconBlockFulu object
func (b *BlindedBeaconBlockFulu) SizeSSZ() (size int) {
	size = 84

	// Field (4) 'Body'
	if b.Body == nil {
		b.Body = new(BlindedBeaconBlockBodyElectra)
	}
	size += b.Body.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the BlindedBeaconBlockFulu object
func (b *BlindedBeaconBlockFulu) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BlindedBeaconBlockFulu object with a hasher
func (b *BlindedBeaconBlockFulu) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	hh.PutUint64(uint64(b.ProposerIndex))

	// Field (2) 'ParentRoot'
	if size := len(b.ParentRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.ParentRoot", size, 32)
		return
	}
	hh.PutBytes(b.ParentRoot)

	// Field (3) 'StateRoot'
	if size := len(b.StateRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.StateRoot", size, 32)
		return
	}
	hh.PutBytes(b.StateRoot)

	// Field (4) 'Body'
	if err = b.Body.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the DataColumnSidecar object
func (d *DataColumnSidecar) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DataColumnSidecar object to a target array
func (d *DataColumnSidecar) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(356)

	// Field (0) 'ColumnIndex'
	dst = ssz.MarshalUint64(dst, d.ColumnIndex)

	// Offset (1) 'DataColumn'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.DataColumn) * 2048

	// Offset (2) 'KzgCommitments'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.KzgCommitments) * 48

	// Offset (3) 'KzgProof'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.KzgProof) * 48

	// Field (4) 'SignedBlockHeader'
	if d.SignedBlockHeader == nil {
		d.SignedBlockHeader = new(SignedBeaconBlockHeader)
	}
	if dst, err = d.SignedBlockHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'KzgCommitmentsInclusionProof'
	if size := len(d.KzgCommitmentsInclusionProof); size != 4 {
		err = ssz.ErrVectorLengthFn("--.KzgCommitmentsInclusionProof", size, 4)
		return
	}
	for ii := 0; ii < 4; ii++ {
		if size := len(d.KzgCommitmentsInclusionProof[ii]); size != 32 {
			err = ssz.ErrBytesLengthFn("--.KzgCommitmentsInclusionProof[ii]", size, 32)
			return
		}
		dst = append(dst, d.KzgCommitmentsInclusionProof[ii]...)
	}

	// Field (1) 'DataColumn'
	if size := len(d.DataColumn); size > 4096 {
		err = ssz.ErrListTooBigFn("--.DataColumn", size, 4096)
		return
	}
	for ii := 0; ii < len(d.DataColumn); ii++ {
		if size := len(d.DataColumn[ii]); size != 2048 {
			err = ssz.ErrBytesLengthFn("--.DataColumn[ii]", size, 2048)
			return
		}
		dst = append(dst, d.DataColumn[ii]...)
	}

	// Field (2) 'KzgCommitments'
	if size := len(d.KzgCommitments); size > 4096 {
		err = ssz.ErrListTooBigFn("--.KzgCommitments", size, 4096)
		return
	}
	for ii := 0; ii < len(d.KzgCommitments); ii++ {
		if size := len(d.KzgCommitments[ii]); size != 48 {
			err = ssz.ErrBytesLengthFn("--.KzgCommitments[ii]", size, 48)
			return
		}
		dst = append(dst, d.KzgCommitments[ii]...)
	}

	// Field (3) 'KzgProof'
	if size := len(d.KzgProof); size > 4096 {
		err = ssz.ErrListTooBigFn("--.KzgProof", size, 4096)
		return
	}
	for ii := 0; ii < len(d.KzgProof); ii++ {
		if size := len(d.KzgProof[ii]); size != 48 {
			err = ssz.ErrBytesLengthFn("--.KzgProof[ii]", size, 48)
			return
		}
		dst = append(dst, d.KzgProof[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the DataColumnSidecar object
func (d *DataColumnSidecar) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 356 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2, o3 uint64

	// Field (0) 'ColumnIndex'
	d.ColumnIndex = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'DataColumn'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 356 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'KzgCommitments'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'KzgProof'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'SignedBlockHeader'
	if d.SignedBlockHeader == nil {
		d.SignedBlockHeader = new(SignedBeaconBlockHeader)
	}
	if err = d.SignedBlockHeader.UnmarshalSSZ(buf[20:228]); err != nil {
		return err
	}

	// Field (5) 'KzgCommitmentsInclusionProof'
	d.KzgCommitmentsInclusionProof = make([][]byte, 4)
	for ii := 0; ii < 4; ii++ {
		if cap(d.KzgCommitmentsInclusionProof[ii]) == 0 {
			d.KzgCommitmentsInclusionProof[ii] = make([]byte, 0, len(buf[228:356][ii*32:(ii+1)*32]))
		}
		d.KzgCommitmentsInclusionProof[ii] = append(d.KzgCommitmentsInclusionProof[ii], buf[228:356][ii*32:(ii+1)*32]...)
	}

	// Field (1) 'DataColumn'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 2048, 4096)
		if err != nil {
			return err
		}
		d.DataColumn = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(d.DataColumn[ii]) == 0 {
				d.DataColumn[ii] = make([]byte, 0, len(buf[ii*2048:(ii+1)*2048]))
			}
			d.DataColumn[ii] = append(d.DataColumn[ii], buf[ii*2048:(ii+1)*2048]...)
		}
	}

	// Field (2) 'KzgCommitments'
	{
		buf = tail[o2:o3]
		num, err := ssz.DivideInt2(len(buf), 48, 4096)
		if err != nil {
			return err
		}
		d.KzgCommitments = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(d.KzgCommitments[ii]) == 0 {
				d.KzgCommitments[ii] = make([]byte, 0, len(buf[ii*48:(ii+1)*48]))
			}
			d.KzgCommitments[ii] = append(d.KzgCommitments[ii], buf[ii*48:(ii+1)*48]...)
		}
	}

	// Field (3) 'KzgProof'
	{
		buf = tail[o3:]
		num, err := ssz.DivideInt2(len(buf), 48, 4096)
		if err != nil {
			return err
		}
		d.KzgProof = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(d.KzgProof[ii]) == 0 {
				d.KzgProof[ii] = make([]byte, 0, len(buf[ii*48:(ii+1)*48]))
			}
			d.KzgProof[ii] = append(d.KzgProof[ii], buf[ii*48:(ii+1)*48]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DataColumnSidecar object
func (d *DataColumnSidecar) SizeSSZ() (size int) {
	size = 356

	// Field (1) 'DataColumn'
	size += len(d.DataColumn) * 2048

	// Field (2) 'KzgCommitments'
	size += len(d.KzgCommitments) * 48

	// Field (3) 'KzgProof'
	size += len(d.KzgProof) * 48

	return
}

// HashTreeRoot ssz hashes the DataColumnSidecar object
func (d *DataColumnSidecar) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DataColumnSidecar object with a hasher
func (d *DataColumnSidecar) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ColumnIndex'
	hh.PutUint64(d.ColumnIndex)

	// Field (1) 'DataColumn'
	{
		if size := len(d.DataColumn); size > 4096 {
			err = ssz.ErrListTooBigFn("--.DataColumn", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range d.DataColumn {
			if len(i) != 2048 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(d.DataColumn))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	// Field (2) 'KzgCommitments'
	{
		if size := len(d.KzgCommitments); size > 4096 {
			err = ssz.ErrListTooBigFn("--.KzgCommitments", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range d.KzgCommitments {
			if len(i) != 48 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(d.KzgCommitments))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	// Field (3) 'KzgProof'
	{
		if size := len(d.KzgProof); size > 4096 {
			err = ssz.ErrListTooBigFn("--.KzgProof", size, 4096)
			return
		}
		subIndx := hh.Index()
		for _, i := range d.KzgProof {
			if len(i) != 48 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}

		numItems := uint64(len(d.KzgProof))
		hh.MerkleizeWithMixin(subIndx, numItems, 4096)
	}

	// Field (4) 'SignedBlockHeader'
	if err = d.SignedBlockHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'KzgCommitmentsInclusionProof'
	{
		if size := len(d.KzgCommitmentsInclusionProof); size != 4 {
			err = ssz.ErrVectorLengthFn("--.KzgCommitmentsInclusionProof", size, 4)
			return
		}
		subIndx := hh.Index()
		for _, i := range d.KzgCommitmentsInclusionProof {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the DataColumnIdentifier object
func (d *DataColumnIdentifier) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the DataColumnIdentifier object to a target array
func (d *DataColumnIdentifier) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BlockRoot'
	if size := len(d.BlockRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.BlockRoot", size, 32)
		return
	}
	dst = append(dst, d.BlockRoot...)

	// Field (1) 'ColumnIndex'
	dst = ssz.MarshalUint64(dst, d.ColumnIndex)

	return
}

// UnmarshalSSZ ssz unmarshals the DataColumnIdentifier object
func (d *DataColumnIdentifier) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 40 {
		return ssz.ErrSize
	}

	// Field (0) 'BlockRoot'
	if cap(d.BlockRoot) == 0 {
		d.BlockRoot = make([]byte, 0, len(buf[0:32]))
	}
	d.BlockRoot = append(d.BlockRoot, buf[0:32]...)

	// Field (1) 'ColumnIndex'
	d.ColumnIndex = ssz.UnmarshallUint64(buf[32:40])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the DataColumnIdentifier object
func (d *DataColumnIdentifier) SizeSSZ() (size int) {
	size = 40
	return
}

// HashTreeRoot ssz hashes the DataColumnIdentifier object
func (d *DataColumnIdentifier) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the DataColumnIdentifier object with a hasher
func (d *DataColumnIdentifier) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'BlockRoot'
	if size := len(d.BlockRoot); size != 32 {
		err = ssz.ErrBytesLengthFn("--.BlockRoot", size, 32)
		return
	}
	hh.PutBytes(d.BlockRoot)

	// Field (1) 'ColumnIndex'
	hh.PutUint64(d.ColumnIndex)

	hh.Merkleize(indx)
	return
}
